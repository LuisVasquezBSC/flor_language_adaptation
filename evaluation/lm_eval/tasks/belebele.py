
import collections
import datasets
import numpy as np
from lm_eval.base import rf, Task
from lm_eval.metrics import mean
from lm_eval.tasks.dataset_paths import dataset_paths


class BelebeleBase(Task):
    VERSION = 1
    DATASET_PATH = dataset_paths["belebele"] if "belebele" in dataset_paths.keys() else "facebook/belebele"
    DATASET_NAME = None
    ARTICLE = None
    QUESTION = None
    ANSWER = None

    cache = {}
    letter_to_num = {"1": 0, "2": 1, "3": 2, "4": 3}

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return False

    def has_test_docs(self):
        return True

    def training_docs(self):
        return self.dataset["test"]

    def validation_docs(self):
        return self.dataset["test"]

    def test_docs(self):
        return self.dataset["test"]

    @classmethod
    def get_answer_option(self, doc):
        answer = self.letter_to_num[doc["correct_answer_num"]]
        options = [doc["mc_answer1"], doc["mc_answer2"], doc["mc_answer3"], doc["mc_answer4"]]
        return options[answer]

    def doc_to_text(self, doc):
        article = self.ARTICLE + ": " + doc["flores_passage"] + "\n"
        question = self.QUESTION + ": " + doc["question"] + "\n"
        answer = self.ANSWER + ":"
        text = article + question + answer
        return text

    def should_decontaminate(self):
        return True

    def doc_to_decontamination_query(self, doc):
        return doc["flores_passage"]

    def doc_to_target(self, doc):
        return " " + self.get_answer_option(doc)

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        options = [doc["mc_answer1"], doc["mc_answer2"], doc["mc_answer3"], doc["mc_answer4"]]
        ll_choices = [
            rf.loglikelihood(ctx, " " + options[i])[0] for i in range(4)
        ]
        return ll_choices

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        gold = self.letter_to_num[doc["correct_answer_num"]]
        pred = np.argmax(results)
        return {"acc": int(pred == gold)}

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {"acc": mean}

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {"acc": True}


class belebele_ca(BelebeleBase):
    DATASET_NAME="ca"
    ARTICLE="Article"
    QUESTION="Pregunta"
    ANSWER="Resposta"

class belebele_es(BelebeleBase):
    DATASET_NAME="es"
    ARTICLE="Art√≠culo"
    QUESTION="Pregunta"
    ANSWER="Respuesta"

class belebele_en(BelebeleBase):
    DATASET_NAME="en"
    ARTICLE="Article"
    QUESTION="Question"
    ANSWER="Answer"

