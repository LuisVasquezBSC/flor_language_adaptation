"""

Homepage: None, Repo: 
"""
import typing
import random
from lm_eval import metrics
from lm_eval.base import Task, rf
from lm_eval.tasks.dataset_paths import dataset_paths


_CITATION = """
}"""


class CaBreu(Task):
    VERSION = 1
    DATASET_PATH = dataset_paths["cabreu"] if "cabreu" in dataset_paths.keys() else "projecte-aina/caBreu"

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        if self.has_training_docs():
            return self.dataset["train"]

    def validation_docs(self):
        if self.has_validation_docs():
            return self.dataset["validation"]

    def test_docs(self):
        if self.has_test_docs():
            return self.dataset["test"]

    def doc_to_text(self, doc: dict) -> str:
        text = "Text: " + doc["content"] + "\n\nResum: "
        return text

    def get_refs(self, doc: dict):
        summaries = doc["summaries"]["extractive"]#["abstractive"]
        return [summaries["a1"], summaries["a2"], summaries["a3"]]

    def doc_to_target(self, doc: dict):
        target = random.choice(self.get_refs(doc))
        return target

    def construct_requests(self, doc: dict, ctx: str):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        Args:
            doc (dict):
                The document as returned from training_docs, validation_docs, or
                test_docs.
            ctx (str):
                The context string, generated by fewshot_context. This includes
                the natural language description, as well as the few shot examples,
                and the question part of the document for `doc`.
            args (dict):
                The specifics of the context, including number of few shots.

        Returns:
            An iterable of `Request` objects.
        """
        return rf.greedy_until(ctx, {"until": ["\n\n"]})

    def process_results(self, doc, results):
        refs = self.get_refs(doc)
        # These metrics are corpus-level not sentence level, so we'll hide the
        # results in this dict and compute the corpus score in the aggregate method
        ref_pred = (refs, results)
        return {
            "bleu": ref_pred,
            "rouge": ref_pred
        }

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        #breakpoint()
        return {
            "bleu": metrics.bleu,
            "rouge": metrics.rouge
        }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {
            "bleu": True,
            "rouge": True
        }


